-- Drop dependent views first
DROP VIEW IF EXISTS warehouse_inventory_value;

DROP VIEW IF EXISTS warehouse_items;

DROP VIEW IF EXISTS warehouses_view;

-- Rename warehouses table to addresses
ALTER TABLE warehouses RENAME TO addresses;

-- Add new columns to addresses table
ALTER TABLE addresses
    ADD COLUMN line_1 text,
    ADD COLUMN line_2 text,
    ADD COLUMN city text,
    ADD COLUMN region text,
    ADD COLUMN code text,
    ADD COLUMN country text,
    ADD COLUMN is_active boolean DEFAULT TRUE,
    ADD COLUMN holds_stock boolean DEFAULT FALSE;

-- Create contacts table
CREATE TABLE contacts(
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text NOT NULL,
    email text,
    phone text
);

-- Create junction table for contacts and addresses
CREATE TABLE contact_addresses(
    contact_id bigint REFERENCES contacts(id) ON DELETE CASCADE,
    address_id bigint REFERENCES addresses(id) ON DELETE CASCADE,
    PRIMARY KEY (contact_id, address_id)
);

-- Update references in item_changes table
ALTER TABLE item_changes RENAME COLUMN warehouse_id TO address_id;

-- Recreate views with updated table names
CREATE OR REPLACE VIEW items_by_address AS
SELECT
    a.id AS address_id,
    a.name AS address_name,
    i.id AS item_id,
    i.name AS item_name,
    i.price AS item_price,
    i.type AS item_type,
    COALESCE(SUM(ic.quantity_change), 0) AS item_quantity,
    COALESCE(SUM(ic.quantity_change), 0) * i.price AS item_value
FROM
    addresses a
    CROSS JOIN items i
    LEFT JOIN item_changes ic ON i.id = ic.item_id
        AND a.id = ic.address_id
WHERE
    a.holds_stock = TRUE
GROUP BY
    a.id,
    a.name,
    i.id,
    i.name,
    i.price,
    i.type
HAVING
    COALESCE(SUM(ic.quantity_change), 0) > 0;

CREATE OR REPLACE VIEW address_inventory_value AS
SELECT
    a.id AS address_id,
    a.name AS address_name,
    COALESCE(SUM(ai.item_value), 0) AS total_inventory_value
FROM
    addresses a
    LEFT JOIN items_by_address ai ON a.id = ai.address_id
WHERE
    a.holds_stock = TRUE
GROUP BY
    a.id,
    a.name;

-- Grant permissions
GRANT ALL ON contacts TO anon, authenticated, service_role;

GRANT ALL ON contact_addresses TO anon, authenticated, service_role;

GRANT ALL ON items_by_address TO anon, authenticated, service_role;

GRANT ALL ON address_inventory_value TO anon, authenticated, service_role;

-- Create a view for addresses with their items
CREATE OR REPLACE VIEW stockpiles AS
SELECT
    a.id AS stockpile_id,
    a.name AS stockpile_name,
    a.created_at AS stockpile_created_at,
    COALESCE(jsonb_agg(
            CASE WHEN i.id IS NOT NULL THEN
                jsonb_build_object('item_id', i.id, 'item_name', i.name, 'item_price', i.price, 'item_type', i.type, 'item_quantity', ic.quantity_change, 'item_value', ic.quantity_change * i.price)
            ELSE
                NULL
            END) FILTER (WHERE i.id IS NOT NULL), '[]'::jsonb) AS items
FROM
    addresses a
    LEFT JOIN (
        SELECT
            address_id,
            item_id,
            SUM(quantity_change) AS quantity_change
        FROM
            item_changes
        GROUP BY
            address_id,
            item_id) ic ON a.id = ic.address_id
    LEFT JOIN items i ON ic.item_id = i.id
WHERE
    a.holds_stock = TRUE
GROUP BY
    a.id,
    a.name,
    a.created_at;

