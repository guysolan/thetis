/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MonthsRouteImport } from './routes/months'
import { Route as InstructionsRouteImport } from './routes/instructions'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettlementsIndexRouteImport } from './routes/settlements/index'
import { Route as SettlementsSavedRouteImport } from './routes/settlements/saved'
import { Route as SettlementsReportRouteImport } from './routes/settlements/report'
import { Route as SettlementsRegionsRouteImport } from './routes/settlements/regions'
import { Route as SettlementsReportIndexRouteImport } from './routes/settlements/report/index'
import { Route as SettlementsReportXmlRouteImport } from './routes/settlements/report/xml'
import { Route as SettlementsReportSummaryRouteImport } from './routes/settlements/report/summary'
import { Route as RegionYearMonthRouteImport } from './routes/$region.$year.$month'
import { Route as SettlementsRegionCountryIndexRouteImport } from './routes/settlements/$region/$country/index'
import { Route as SettlementsRegionCountryXmlRouteImport } from './routes/settlements/$region/$country/xml'
import { Route as SettlementsRegionCountrySummaryRouteImport } from './routes/settlements/$region/$country/summary'

const MonthsRoute = MonthsRouteImport.update({
  id: '/months',
  path: '/months',
  getParentRoute: () => rootRouteImport,
} as any)
const InstructionsRoute = InstructionsRouteImport.update({
  id: '/instructions',
  path: '/instructions',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettlementsIndexRoute = SettlementsIndexRouteImport.update({
  id: '/settlements/',
  path: '/settlements/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettlementsSavedRoute = SettlementsSavedRouteImport.update({
  id: '/settlements/saved',
  path: '/settlements/saved',
  getParentRoute: () => rootRouteImport,
} as any)
const SettlementsReportRoute = SettlementsReportRouteImport.update({
  id: '/settlements/report',
  path: '/settlements/report',
  getParentRoute: () => rootRouteImport,
} as any)
const SettlementsRegionsRoute = SettlementsRegionsRouteImport.update({
  id: '/settlements/regions',
  path: '/settlements/regions',
  getParentRoute: () => rootRouteImport,
} as any)
const SettlementsReportIndexRoute = SettlementsReportIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettlementsReportRoute,
} as any)
const SettlementsReportXmlRoute = SettlementsReportXmlRouteImport.update({
  id: '/xml',
  path: '/xml',
  getParentRoute: () => SettlementsReportRoute,
} as any)
const SettlementsReportSummaryRoute =
  SettlementsReportSummaryRouteImport.update({
    id: '/summary',
    path: '/summary',
    getParentRoute: () => SettlementsReportRoute,
  } as any)
const RegionYearMonthRoute = RegionYearMonthRouteImport.update({
  id: '/$region/$year/$month',
  path: '/$region/$year/$month',
  getParentRoute: () => rootRouteImport,
} as any)
const SettlementsRegionCountryIndexRoute =
  SettlementsRegionCountryIndexRouteImport.update({
    id: '/settlements/$region/$country/',
    path: '/settlements/$region/$country/',
    getParentRoute: () => rootRouteImport,
  } as any)
const SettlementsRegionCountryXmlRoute =
  SettlementsRegionCountryXmlRouteImport.update({
    id: '/settlements/$region/$country/xml',
    path: '/settlements/$region/$country/xml',
    getParentRoute: () => rootRouteImport,
  } as any)
const SettlementsRegionCountrySummaryRoute =
  SettlementsRegionCountrySummaryRouteImport.update({
    id: '/settlements/$region/$country/summary',
    path: '/settlements/$region/$country/summary',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/instructions': typeof InstructionsRoute
  '/months': typeof MonthsRoute
  '/settlements/regions': typeof SettlementsRegionsRoute
  '/settlements/report': typeof SettlementsReportRouteWithChildren
  '/settlements/saved': typeof SettlementsSavedRoute
  '/settlements': typeof SettlementsIndexRoute
  '/$region/$year/$month': typeof RegionYearMonthRoute
  '/settlements/report/summary': typeof SettlementsReportSummaryRoute
  '/settlements/report/xml': typeof SettlementsReportXmlRoute
  '/settlements/report/': typeof SettlementsReportIndexRoute
  '/settlements/$region/$country/summary': typeof SettlementsRegionCountrySummaryRoute
  '/settlements/$region/$country/xml': typeof SettlementsRegionCountryXmlRoute
  '/settlements/$region/$country': typeof SettlementsRegionCountryIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/instructions': typeof InstructionsRoute
  '/months': typeof MonthsRoute
  '/settlements/regions': typeof SettlementsRegionsRoute
  '/settlements/saved': typeof SettlementsSavedRoute
  '/settlements': typeof SettlementsIndexRoute
  '/$region/$year/$month': typeof RegionYearMonthRoute
  '/settlements/report/summary': typeof SettlementsReportSummaryRoute
  '/settlements/report/xml': typeof SettlementsReportXmlRoute
  '/settlements/report': typeof SettlementsReportIndexRoute
  '/settlements/$region/$country/summary': typeof SettlementsRegionCountrySummaryRoute
  '/settlements/$region/$country/xml': typeof SettlementsRegionCountryXmlRoute
  '/settlements/$region/$country': typeof SettlementsRegionCountryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/instructions': typeof InstructionsRoute
  '/months': typeof MonthsRoute
  '/settlements/regions': typeof SettlementsRegionsRoute
  '/settlements/report': typeof SettlementsReportRouteWithChildren
  '/settlements/saved': typeof SettlementsSavedRoute
  '/settlements/': typeof SettlementsIndexRoute
  '/$region/$year/$month': typeof RegionYearMonthRoute
  '/settlements/report/summary': typeof SettlementsReportSummaryRoute
  '/settlements/report/xml': typeof SettlementsReportXmlRoute
  '/settlements/report/': typeof SettlementsReportIndexRoute
  '/settlements/$region/$country/summary': typeof SettlementsRegionCountrySummaryRoute
  '/settlements/$region/$country/xml': typeof SettlementsRegionCountryXmlRoute
  '/settlements/$region/$country/': typeof SettlementsRegionCountryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/instructions'
    | '/months'
    | '/settlements/regions'
    | '/settlements/report'
    | '/settlements/saved'
    | '/settlements'
    | '/$region/$year/$month'
    | '/settlements/report/summary'
    | '/settlements/report/xml'
    | '/settlements/report/'
    | '/settlements/$region/$country/summary'
    | '/settlements/$region/$country/xml'
    | '/settlements/$region/$country'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/instructions'
    | '/months'
    | '/settlements/regions'
    | '/settlements/saved'
    | '/settlements'
    | '/$region/$year/$month'
    | '/settlements/report/summary'
    | '/settlements/report/xml'
    | '/settlements/report'
    | '/settlements/$region/$country/summary'
    | '/settlements/$region/$country/xml'
    | '/settlements/$region/$country'
  id:
    | '__root__'
    | '/'
    | '/instructions'
    | '/months'
    | '/settlements/regions'
    | '/settlements/report'
    | '/settlements/saved'
    | '/settlements/'
    | '/$region/$year/$month'
    | '/settlements/report/summary'
    | '/settlements/report/xml'
    | '/settlements/report/'
    | '/settlements/$region/$country/summary'
    | '/settlements/$region/$country/xml'
    | '/settlements/$region/$country/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InstructionsRoute: typeof InstructionsRoute
  MonthsRoute: typeof MonthsRoute
  SettlementsRegionsRoute: typeof SettlementsRegionsRoute
  SettlementsReportRoute: typeof SettlementsReportRouteWithChildren
  SettlementsSavedRoute: typeof SettlementsSavedRoute
  SettlementsIndexRoute: typeof SettlementsIndexRoute
  RegionYearMonthRoute: typeof RegionYearMonthRoute
  SettlementsRegionCountrySummaryRoute: typeof SettlementsRegionCountrySummaryRoute
  SettlementsRegionCountryXmlRoute: typeof SettlementsRegionCountryXmlRoute
  SettlementsRegionCountryIndexRoute: typeof SettlementsRegionCountryIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/months': {
      id: '/months'
      path: '/months'
      fullPath: '/months'
      preLoaderRoute: typeof MonthsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/instructions': {
      id: '/instructions'
      path: '/instructions'
      fullPath: '/instructions'
      preLoaderRoute: typeof InstructionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settlements/': {
      id: '/settlements/'
      path: '/settlements'
      fullPath: '/settlements'
      preLoaderRoute: typeof SettlementsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settlements/saved': {
      id: '/settlements/saved'
      path: '/settlements/saved'
      fullPath: '/settlements/saved'
      preLoaderRoute: typeof SettlementsSavedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settlements/report': {
      id: '/settlements/report'
      path: '/settlements/report'
      fullPath: '/settlements/report'
      preLoaderRoute: typeof SettlementsReportRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settlements/regions': {
      id: '/settlements/regions'
      path: '/settlements/regions'
      fullPath: '/settlements/regions'
      preLoaderRoute: typeof SettlementsRegionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settlements/report/': {
      id: '/settlements/report/'
      path: '/'
      fullPath: '/settlements/report/'
      preLoaderRoute: typeof SettlementsReportIndexRouteImport
      parentRoute: typeof SettlementsReportRoute
    }
    '/settlements/report/xml': {
      id: '/settlements/report/xml'
      path: '/xml'
      fullPath: '/settlements/report/xml'
      preLoaderRoute: typeof SettlementsReportXmlRouteImport
      parentRoute: typeof SettlementsReportRoute
    }
    '/settlements/report/summary': {
      id: '/settlements/report/summary'
      path: '/summary'
      fullPath: '/settlements/report/summary'
      preLoaderRoute: typeof SettlementsReportSummaryRouteImport
      parentRoute: typeof SettlementsReportRoute
    }
    '/$region/$year/$month': {
      id: '/$region/$year/$month'
      path: '/$region/$year/$month'
      fullPath: '/$region/$year/$month'
      preLoaderRoute: typeof RegionYearMonthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settlements/$region/$country/': {
      id: '/settlements/$region/$country/'
      path: '/settlements/$region/$country'
      fullPath: '/settlements/$region/$country'
      preLoaderRoute: typeof SettlementsRegionCountryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settlements/$region/$country/xml': {
      id: '/settlements/$region/$country/xml'
      path: '/settlements/$region/$country/xml'
      fullPath: '/settlements/$region/$country/xml'
      preLoaderRoute: typeof SettlementsRegionCountryXmlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settlements/$region/$country/summary': {
      id: '/settlements/$region/$country/summary'
      path: '/settlements/$region/$country/summary'
      fullPath: '/settlements/$region/$country/summary'
      preLoaderRoute: typeof SettlementsRegionCountrySummaryRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface SettlementsReportRouteChildren {
  SettlementsReportSummaryRoute: typeof SettlementsReportSummaryRoute
  SettlementsReportXmlRoute: typeof SettlementsReportXmlRoute
  SettlementsReportIndexRoute: typeof SettlementsReportIndexRoute
}

const SettlementsReportRouteChildren: SettlementsReportRouteChildren = {
  SettlementsReportSummaryRoute: SettlementsReportSummaryRoute,
  SettlementsReportXmlRoute: SettlementsReportXmlRoute,
  SettlementsReportIndexRoute: SettlementsReportIndexRoute,
}

const SettlementsReportRouteWithChildren =
  SettlementsReportRoute._addFileChildren(SettlementsReportRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InstructionsRoute: InstructionsRoute,
  MonthsRoute: MonthsRoute,
  SettlementsRegionsRoute: SettlementsRegionsRoute,
  SettlementsReportRoute: SettlementsReportRouteWithChildren,
  SettlementsSavedRoute: SettlementsSavedRoute,
  SettlementsIndexRoute: SettlementsIndexRoute,
  RegionYearMonthRoute: RegionYearMonthRoute,
  SettlementsRegionCountrySummaryRoute: SettlementsRegionCountrySummaryRoute,
  SettlementsRegionCountryXmlRoute: SettlementsRegionCountryXmlRoute,
  SettlementsRegionCountryIndexRoute: SettlementsRegionCountryIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
