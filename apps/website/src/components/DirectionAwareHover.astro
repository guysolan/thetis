---
// Import statements at the top of the frontmatter
import { Image } from "astro:assets";

// Define props using Astro's interface
interface Props {
  imageUrl: string;
  childrenClassName?: string;
  imageClassName?: string;
  className?: string;
}

const {
  imageUrl,
  childrenClassName = "",
  imageClassName = "",
  className = "",
} = Astro.props;
---

<script>
  // Client-side JavaScript
  function getDirection(ev: MouseEvent, obj: HTMLElement) {
    const { width: w, height: h, left, top } = obj.getBoundingClientRect();
    const x = ev.clientX - left - (w / 2) * (w > h ? h / w : 1);
    const y = ev.clientY - top - (h / 2) * (h > w ? w / h : 1);
    const d = Math.round(Math.atan2(y, x) / 1.57079633 + 5) % 4;
    return d;
  }

  // Initialize the component functionality
  function initDirectionAware() {
    const cards = document.querySelectorAll('.direction-aware-card');
    
    cards.forEach(card => {
      const content = card.querySelector('.card-content');
      const overlay = card.querySelector('.card-overlay');
      const text = card.querySelector('.card-text');

      card.addEventListener('mouseenter', (event) => {
        if (!(event.target instanceof HTMLElement)) return;
        const direction = getDirection(event, event.target);
        
        let transform = '';
        let textTransform = '';
        
        switch (direction) {
          case 0: // top
            transform = 'translateY(20px)';
            textTransform = 'translateY(-20px)';
            break;
          case 1: // right
            transform = 'translateX(-20px)';
            textTransform = 'translateX(20px)';
            break;
          case 2: // bottom
            transform = 'translateY(-20px)';
            textTransform = 'translateY(2px)';
            break;
          case 3: // left
            transform = 'translateX(20px)';
            textTransform = 'translateX(-2px)';
            break;
        }

        if (content) content.style.transform = transform;
        if (overlay) overlay.style.opacity = '1';
        if (text) {
          text.style.transform = textTransform;
          text.style.opacity = '1';
        }
      });

      card.addEventListener('mouseleave', () => {
        if (content) content.style.transform = 'translate(0, 0)';
        if (overlay) overlay.style.opacity = '0';
        if (text) {
          text.style.transform = 'translate(0, 0)';
          text.style.opacity = '0';
        }
      });
    });
  }

  // Run after DOM is loaded
  document.addEventListener('DOMContentLoaded', initDirectionAware);
</script>

<div class={`direction-aware-card md:h-96 w-60 h-60 md:w-96 bg-transparent rounded-lg overflow-hidden group/card relative ${className}`}>
  <div class="relative w-full h-full transition-transform duration-200 card-content">
    <div class="group-hover/card:block z-10 absolute inset-0 hidden bg-black/40 opacity-0 w-full h-full transition-opacity duration-500 card-overlay"></div>
    <div class="relative bg-gray-50 dark:bg-black w-full h-full">
      <Image
        alt="image"
        class={`h-full w-full object-cover scale-[1.15] ${imageClassName}`}
        width={1000}
        height={1000}
        src={imageUrl}
      />
    </div>
    <div class={`card-text text-white absolute bottom-4 left-4 z-40 opacity-0 transition-all duration-500 ${childrenClassName}`}>
      <slot />
    </div>
  </div>
</div>

<style>
  .direction-aware-card {
    perspective: 1000px;
  }

  .card-content {
    transition: transform 0.2s ease-out;
  }

  .card-overlay {
    transition: opacity 0.5s ease-out;
  }

  .card-text {
    transition: all 0.5s ease-out;
  }
</style>