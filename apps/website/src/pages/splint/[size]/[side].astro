---
import Layout from "../../../layouts/Layout.astro";
import type { SplintData } from "../../../types/splint";
import { getSplintData } from "../../../lib/google-sheets";
import getCheckoutLink from "../../../lib/shopify/checkout-links";
import { buttonVariants } from "../../../components/ui/button";
import Slide from "../../../components/Slide.astro";
import HighlightedWord from "../../../components/HighlightedWord";
import ColorGradient from "../../../components/ColorGradient.astro";
import FreeAndSecure from "../../../components/buy-button/FreeAndSecure";
import LocationSelect from "../../../components/location/LocationSelect";
import DetailsTable from "../../../components/DetailsTable";
import CheckWithCareTeam from "../../../components/buy-button/CheckWithCareTeam";

export const prerender = true;

// Function to detect user's region based on IP
async function detectUserRegion(): Promise<"us" | "uk"> {
    try {
        // Get the user's IP from the request headers
        const forwardedFor = Astro.request.headers.get("x-forwarded-for");
        const realIp = Astro.request.headers.get("x-real-ip");
        const ip =
            forwardedFor?.split(",")[0] ||
            realIp ||
            Astro.request.headers.get("cf-connecting-ip");

        console.log("IP detection headers:");
        console.log("x-forwarded-for:", forwardedFor);
        console.log("x-real-ip:", realIp);
        console.log(
            "cf-connecting-ip:",
            Astro.request.headers.get("cf-connecting-ip"),
        );
        console.log("Detected IP:", ip);

        if (!ip) {
            console.log("No IP detected, defaulting to US");
            return "us";
        }

        // Use ipapi.co to get country information
        const response = await fetch(`https://ipapi.co/${ip}/json/`);
        const data = await response.json();

        console.log("IP detection result:", data);

        // Check if user is in UK
        if (data.country_code === "GB") {
            console.log("User detected in UK");
            return "uk";
        }

        console.log("User detected in US/other, defaulting to US");
        return "us";
    } catch (error) {
        console.error("Error detecting user region:", error);
        return "us"; // Default to US
    }
}

export async function getStaticPaths() {
    // Generate paths for all size/side combinations
    const sizes = ["large", "small"];
    const sides = ["left", "right"];

    return sizes.flatMap((size) =>
        sides.map((side) => ({
            params: { size, side },
        })),
    );
}

const { size, side } = Astro.params;

// Detect user's region
const region = await detectUserRegion();
console.log(`Detected region: ${region}`);

// Set query parameter based on detected region (defaults to US)
const url = new URL(Astro.request.url);
const currentRegion = url.searchParams.get("region") as "us" | "uk" | null;
const finalRegion = currentRegion || region;

// If no region parameter is set, use the detected region without redirecting
if (!currentRegion) {
    console.log(
        `No region parameter found, using detected region: ${finalRegion}`,
    );
}

console.log(`Final region being used: ${finalRegion}`);
console.log(`Current URL: ${url.pathname}${url.search}`);

// Get splint data for the detected region
const splintData = await getSplintData(finalRegion);
console.log(
    `Retrieved ${splintData.length} splint records for region: ${finalRegion}`,
);
console.log(`First splint price: ${splintData[0]?.price}`);

const splint = splintData?.find(
    (d) =>
        d.size.toLowerCase() === size && d.title.toLowerCase().includes(side),
);

console.log(`Found splint: ${splint?.title}`);
console.log(`Splint price: ${splint?.price}`);

if (!splint) {
    return Astro.redirect("/404");
}

const checkoutLink = await getCheckoutLink(
    size as "large" | "small",
    side as string,
);

// Generate variant URLs
const variants = [
    { size: "large", side: "left", label: "Large Left" },
    { size: "large", side: "right", label: "Large Right" },
    { size: "small", side: "left", label: "Small Left" },
    { size: "small", side: "right", label: "Small Right" },
];
---

<Layout title={splint.title} description={splint.description} lang="en">
    <main class="">
        <ColorGradient>
            <div class="mx-auto px-4 container">
                <div
                    class="items-center gap-12 grid grid-cols-1 lg:grid-cols-2"
                >
                    <!-- Product Image -->
                    <div class="space-y-6">
                        <img
                            src={splint["image link"]}
                            alt={splint.title}
                            class="shadow-2xl rounded-2xl w-full"
                        />
                    </div>

                    <!-- Product Info -->
                    <div class="space-y-8">
                        <a
                            href={`/splint?region=${finalRegion}`}
                            class="text-primary hover:text-primary/80 text-sm underline"
                        >
                            ← View all splint information and details
                        </a>
                        <!-- Region Selection -->
                        <div class="flex flex-col gap-y-1">
                            <label class="text-gray-600 text-sm">
                                Select your region
                            </label>
                            <LocationSelect
                                client:load
                                finalRegion={finalRegion}
                            />
                        </div>
                        <div>
                            <h1 class="mb-4 font-bold text-4xl leading-tight">
                                Achilles Tendon <HighlightedWord
                                    >Rupture</HighlightedWord
                                > Splint
                            </h1>
                            <p class="mb-6 text-gray-600 text-xl">
                                {
                                    (size as string).charAt(0).toUpperCase() +
                                        (size as string).slice(1)
                                } Size • {
                                    (side as string).charAt(0).toUpperCase() +
                                        (side as string).slice(1)
                                }
                                Side
                            </p>
                        </div>

                        <!-- Size & Side Selection -->
                        <div class="space-y-4">
                            <h3 class="font-semibold text-lg">
                                Select Your Size & Side
                            </h3>
                            <div class="flex flex-wrap gap-3">
                                {
                                    variants.map((variant) => {
                                        const isActive =
                                            variant.size === size &&
                                            variant.side === side;
                                        const href = `/splint/${variant.size}/${variant.side}?region=${finalRegion}`;

                                        return (
                                            <a
                                                href={href}
                                                class:list={[
                                                    "px-6 py-3 rounded-lg text-sm font-medium transition-all duration-200 border-2",
                                                    {
                                                        "bg-primary text-white border-primary shadow-lg":
                                                            isActive,
                                                        "bg-white text-gray-700 border-gray-200 hover:border-primary/50 hover:shadow-md":
                                                            !isActive,
                                                    },
                                                ]}
                                            >
                                                {variant.label}
                                            </a>
                                        );
                                    })
                                }
                            </div>
                        </div>

                        <!-- Price and Availability -->
                        <div class="space-y-6">
                            <div class="flex items-baseline gap-4">
                                <span
                                    class="font-semibold text-slate-900 text-2xl"
                                    id="price-display">{splint.price}</span
                                >
                            </div>

                            <div class="flex items-center gap-3">
                                <span
                                    class:list={[
                                        "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium",
                                        {
                                            "bg-green-100 text-green-800 border border-green-200":
                                                splint.availability ===
                                                "in_stock",
                                            "bg-red-100 text-red-800 border border-red-200":
                                                splint.availability !==
                                                "in_stock",
                                        },
                                    ]}
                                >
                                    {
                                        splint.availability === "in_stock"
                                            ? "✓ In Stock"
                                            : "Out of Stock"
                                    }
                                </span>
                                <span class="text-gray-600 text-sm"
                                    >• Ready to ship within 24 hours</span
                                >
                            </div>
                        </div>

                        <CheckWithCareTeam lang="en" client:load />

                        <!-- Add to Cart Button -->
                        <div class="space-y-4">
                            {
                                checkoutLink ? (
                                    <a
                                        href={checkoutLink}
                                        class={buttonVariants({
                                            size: "xl",
                                            className:
                                                "w-full text-lg py-4 shadow-lg hover:shadow-xl transition-all duration-200",
                                        })}
                                    >
                                        Add to Cart - {splint.price}
                                    </a>
                                ) : (
                                    <button
                                        class={buttonVariants({
                                            size: "xl",
                                            variant: "outline",
                                            className:
                                                "w-full text-lg py-4 cursor-not-allowed",
                                        })}
                                        disabled
                                    >
                                        Add to Cart -{splint.price}
                                    </button>
                                )
                            }
                            <br />

                            <FreeAndSecure lang="en" />
                        </div>
                    </div>
                </div>
            </div>
        </ColorGradient>

        <!-- Description Section -->
        <section class="bg-white py-16">
            <div class="mx-auto px-4 container">
                <div class="mx-auto max-w-4xl">
                    <h2 class="mb-8 font-semibold text-3xl text-center">
                        What Makes This <HighlightedWord
                            >Splint Special</HighlightedWord
                        >
                    </h2>
                    <div class="max-w-none prose prose-lg">
                        <div
                            class="text-gray-700 leading-relaxed whitespace-pre-wrap"
                        >
                            {splint.description}
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Product Details Section -->
        <Slide>
            <DetailsTable splint={splint} />
        </Slide>
    </main>
</Layout>
