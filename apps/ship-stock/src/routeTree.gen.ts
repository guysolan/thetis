/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StockImport } from './routes/stock'
import { Route as OrdersImport } from './routes/orders'
import { Route as DocumentsImport } fr./routes/buildocuments'
import { Route as DirectoryImport } from './routes/directory'
import { Route as BuildImport } from './routes/build'
import { Route as IndexImport } from './routes/index'
import { Route as DocumentsOrdersOrderIdStocktakeReportImport } from './routes/documents/orders/$orderId/stocktake-report'
import { Route as DocumentsOrdersOrderIdShippingLabelImport } from './routes/documents/orders/$orderId/shipping-label'
import { Route as DocumentsOrdersOrderIdPurchaseOrderImport } from './routes/documents/orders/$orderId/purchase-order'
import { Route as DocumentsOrdersOrderIdInvoiceImport } from './routes/documents/orders/$orderId/invoice'
import { Route as DocumentsOrdersOrderIdCommercialInvoiceImport } from './routes/documents/orders/$orderId/commercial-invoice'

// Create/Update Routes

const StockRoute = StockImport.update({
  id: '/stock',
  path: '/stock',
  getParentRoute: () => rootRoute,
} as any)

const OrdersRoute = OrdersImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRoute,
} as any)

const DocumentsRoute = DocumentsImport.update({
  id: '/documents',
  path: '/documents',
  getParentRoute: () => rootRoute,
} as any)

const DirectoryRoute = DirectoryImport.update({
  id: '/directory',
  path: '/directory',
  getParentRoute: () => rootRoute,
} as any)

const BuildRoute = BuildImport.update({
  id: '/build',
  path: '/build',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DocumentsOrdersOrderIdStocktakeReportRoute =
  DocumentsOrdersOrderIdStocktakeReportImport.update({
    id: '/orders/$orderId/stocktake-report',
    path: '/orders/$orderId/stocktake-report',
    getParentRoute: () => DocumentsRoute,
  } as any)

const DocumentsOrdersOrderIdShippingLabelRoute =
  DocumentsOrdersOrderIdShippingLabelImport.update({
    id: '/orders/$orderId/shipping-label',
    path: '/orders/$orderId/shipping-label',
    getParentRoute: () => DocumentsRoute,
  } as any)

const DocumentsOrdersOrderIdPurchaseOrderRoute =
  DocumentsOrdersOrderIdPurchaseOrderImport.update({
    id: '/orders/$orderId/purchase-order',
    path: '/orders/$orderId/purchase-order',
    getParentRoute: () => DocumentsRoute,
  } as any)

const DocumentsOrdersOrderIdInvoiceRoute =
  DocumentsOrdersOrderIdInvoiceImport.update({
    id: '/orders/$orderId/invoice',
    path: '/orders/$orderId/invoice',
    getParentRoute: () => DocumentsRoute,
  } as any)

const DocumentsOrdersOrderIdCommercialInvoiceRoute =
  DocumentsOrdersOrderIdCommercialInvoiceImport.update({
    id: '/orders/$orderId/commercial-invoice',
    path: '/orders/$orderId/commercial-invoice',
    getParentRoute: () => DocumentsRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/build': {
      id: '/build'
      path: '/build'
      fullPath: '/build'
      preLoaderRoute: typeof BuildImport
      parentRoute: typeof rootRoute
    }
    '/directory': {
      id: '/directory'
      path: '/directory'
      fullPath: '/directory'
      preLoaderRoute: typeof DirectoryImport
      parentRoute: typeof rootRoute
    }
    '/documents': {
      id: '/documents'
      path: '/documents'
      fullPath: '/documents'
      preLoaderRoute: typeof DocumentsImport
      parentRoute: typeof rootRoute
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersImport
      parentRoute: typeof rootRoute
    }
    '/stock': {
      id: '/stock'
      path: '/stock'
      fullPath: '/stock'
      preLoaderRoute: typeof StockImport
      parentRoute: typeof rootRoute
    }
    '/documents/orders/$orderId/commercial-invoice': {
      id: '/documents/orders/$orderId/commercial-invoice'
      path: '/orders/$orderId/commercial-invoice'
      fullPath: '/documents/orders/$orderId/commercial-invoice'
      preLoaderRoute: typeof DocumentsOrdersOrderIdCommercialInvoiceImport
      parentRoute: typeof DocumentsImport
    }
    '/documents/orders/$orderId/invoice': {
      id: '/documents/orders/$orderId/invoice'
      path: '/orders/$orderId/invoice'
      fullPath: '/documents/orders/$orderId/invoice'
      preLoaderRoute: typeof DocumentsOrdersOrderIdInvoiceImport
      parentRoute: typeof DocumentsImport
    }
    '/documents/orders/$orderId/purchase-order': {
      id: '/documents/orders/$orderId/purchase-order'
      path: '/orders/$orderId/purchase-order'
      fullPath: '/documents/orders/$orderId/purchase-order'
      preLoaderRoute: typeof DocumentsOrdersOrderIdPurchaseOrderImport
      parentRoute: typeof DocumentsImport
    }
    '/documents/orders/$orderId/shipping-label': {
      id: '/documents/orders/$orderId/shipping-label'
      path: '/orders/$orderId/shipping-label'
      fullPath: '/documents/orders/$orderId/shipping-label'
      preLoaderRoute: typeof DocumentsOrdersOrderIdShippingLabelImport
      parentRoute: typeof DocumentsImport
    }
    '/documents/orders/$orderId/stocktake-report': {
      id: '/documents/orders/$orderId/stocktake-report'
      path: '/orders/$orderId/stocktake-report'
      fullPath: '/documents/orders/$orderId/stocktake-report'
      preLoaderRoute: typeof DocumentsOrdersOrderIdStocktakeReportImport
      parentRoute: typeof DocumentsImport
    }
  }
}

// Create and export the route tree

interface DocumentsRouteChildren {
  DocumentsOrdersOrderIdCommercialInvoiceRoute: typeof DocumentsOrdersOrderIdCommercialInvoiceRoute
  DocumentsOrdersOrderIdInvoiceRoute: typeof DocumentsOrdersOrderIdInvoiceRoute
  DocumentsOrdersOrderIdPurchaseOrderRoute: typeof DocumentsOrdersOrderIdPurchaseOrderRoute
  DocumentsOrdersOrderIdShippingLabelRoute: typeof DocumentsOrdersOrderIdShippingLabelRoute
  DocumentsOrdersOrderIdStocktakeReportRoute: typeof DocumentsOrdersOrderIdStocktakeReportRoute
}

const DocumentsRouteChildren: DocumentsRouteChildren = {
  DocumentsOrdersOrderIdCommercialInvoiceRoute:
    DocumentsOrdersOrderIdCommercialInvoiceRoute,
  DocumentsOrdersOrderIdInvoiceRoute: DocumentsOrdersOrderIdInvoiceRoute,
  DocumentsOrdersOrderIdPurchaseOrderRoute:
    DocumentsOrdersOrderIdPurchaseOrderRoute,
  DocumentsOrdersOrderIdShippingLabelRoute:
    DocumentsOrdersOrderIdShippingLabelRoute,
  DocumentsOrdersOrderIdStocktakeReportRoute:
    DocumentsOrdersOrderIdStocktakeReportRoute,
}

const DocumentsRouteWithChildren = DocumentsRoute._addFileChildren(
  DocumentsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/build': typeof BuildRoute
  '/directory': typeof DirectoryRoute
  '/documents': typeof DocumentsRouteWithChildren
  '/orders': typeof OrdersRoute
  '/stock': typeof StockRoute
  '/documents/orders/$orderId/commercial-invoice': typeof DocumentsOrdersOrderIdCommercialInvoiceRoute
  '/documents/orders/$orderId/invoice': typeof DocumentsOrdersOrderIdInvoiceRoute
  '/documents/orders/$orderId/purchase-order': typeof DocumentsOrdersOrderIdPurchaseOrderRoute
  '/documents/orders/$orderId/shipping-label': typeof DocumentsOrdersOrderIdShippingLabelRoute
  '/documents/orders/$orderId/stocktake-report': typeof DocumentsOrdersOrderIdStocktakeReportRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/build': typeof BuildRoute
  '/directory': typeof DirectoryRoute
  '/documents': typeof DocumentsRouteWithChildren
  '/orders': typeof OrdersRoute
  '/stock': typeof StockRoute
  '/documents/orders/$orderId/commercial-invoice': typeof DocumentsOrdersOrderIdCommercialInvoiceRoute
  '/documents/orders/$orderId/invoice': typeof DocumentsOrdersOrderIdInvoiceRoute
  '/documents/orders/$orderId/purchase-order': typeof DocumentsOrdersOrderIdPurchaseOrderRoute
  '/documents/orders/$orderId/shipping-label': typeof DocumentsOrdersOrderIdShippingLabelRoute
  '/documents/orders/$orderId/stocktake-report': typeof DocumentsOrdersOrderIdStocktakeReportRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/build': typeof BuildRoute
  '/directory': typeof DirectoryRoute
  '/documents': typeof DocumentsRouteWithChildren
  '/orders': typeof OrdersRoute
  '/stock': typeof StockRoute
  '/documents/orders/$orderId/commercial-invoice': typeof DocumentsOrdersOrderIdCommercialInvoiceRoute
  '/documents/orders/$orderId/invoice': typeof DocumentsOrdersOrderIdInvoiceRoute
  '/documents/orders/$orderId/purchase-order': typeof DocumentsOrdersOrderIdPurchaseOrderRoute
  '/documents/orders/$orderId/shipping-label': typeof DocumentsOrdersOrderIdShippingLabelRoute
  '/documents/orders/$orderId/stocktake-report': typeof DocumentsOrdersOrderIdStocktakeReportRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/build'
    | '/directory'
    | '/documents'
    | '/orders'
    | '/stock'
    | '/documents/orders/$orderId/commercial-invoice'
    | '/documents/orders/$orderId/invoice'
    | '/documents/orders/$orderId/purchase-order'
    | '/documents/orders/$orderId/shipping-label'
    | '/documents/orders/$orderId/stocktake-report'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/build'
    | '/directory'
    | '/documents'
    | '/orders'
    | '/stock'
    | '/documents/orders/$orderId/commercial-invoice'
    | '/documents/orders/$orderId/invoice'
    | '/documents/orders/$orderId/purchase-order'
    | '/documents/orders/$orderId/shipping-label'
    | '/documents/orders/$orderId/stocktake-report'
  id:
    | '__root__'
    | '/'
    | '/build'
    | '/directory'
    | '/documents'
    | '/orders'
    | '/stock'
    | '/documents/orders/$orderId/commercial-invoice'
    | '/documents/orders/$orderId/invoice'
    | '/documents/orders/$orderId/purchase-order'
    | '/documents/orders/$orderId/shipping-label'
    | '/documents/orders/$orderId/stocktake-report'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BuildRoute: typeof BuildRoute
  DirectoryRoute: typeof DirectoryRoute
  DocumentsRoute: typeof DocumentsRouteWithChildren
  OrdersRoute: typeof OrdersRoute
  StockRoute: typeof StockRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BuildRoute: BuildRoute,
  DirectoryRoute: DirectoryRoute,
  DocumentsRoute: DocumentsRouteWithChildren,
  OrdersRoute: OrdersRoute,
  StockRoute: StockRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/build",
        "/directory",
        "/documents",
        "/orders",
        "/stock"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/build": {
      "filePath": "build.tsx"
    },
    "/directory": {
      "filePath": "directory.tsx"
    },
    "/documents": {
      "filePath": "documents.tsx",
      "children": [
        "/documents/orders/$orderId/commercial-invoice",
        "/documents/orders/$orderId/invoice",
        "/documents/orders/$orderId/purchase-order",
        "/documents/orders/$orderId/shipping-label",
        "/documents/orders/$orderId/stocktake-report"
      ]
    },
    "/orders": {
      "filePath": "orders.tsx"
    },
    "/stock": {
      "filePath": "stock.tsx"
    },
    "/documents/orders/$orderId/commercial-invoice": {
      "filePath": "documents/orders/$orderId/commercial-invoice.tsx",
      "parent": "/documents"
    },
    "/documents/orders/$orderId/invoice": {
      "filePath": "documents/orders/$orderId/invoice.tsx",
      "parent": "/documents"
    },
    "/documents/orders/$orderId/purchase-order": {
      "filePath": "documents/orders/$orderId/purchase-order.tsx",
      "parent": "/documents"
    },
    "/documents/orders/$orderId/shipping-label": {
      "filePath": "documents/orders/$orderId/shipping-label.tsx",
      "parent": "/documents"
    },
    "/documents/orders/$orderId/stocktake-report": {
      "filePath": "documents/orders/$orderId/stocktake-report.tsx",
      "parent": "/documents"
    }
  }
}
ROUTE_MANIFEST_END */
